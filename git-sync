#!/usr/bin/env bash
#
# Corey Goldberg (https://github.com/cgoldberg)
#
# git-sync - rebase all local git branches in current repo from remote tracking branches
#
# - fetch from remote and prune stale refs
# - stash uncommitted changes
# - switch to default branch and do pull/rebase
# - switch to every other local branch and do pull/rebase
# - switch back to original branch
#
# instructions:
#  - add this script to a directory on your PATH
#  - make this script executable (chmod +x git-sync)
#  - run 'git sync' from any directory in a local git repo

die() {
    tput setaf 1 && echo -en "\u274C " && tput sgr0
    echo "$*" 1>&2
    exit 1
}

if [ ! -x "$(command -v git)" ]; then
    die "fatal: can't find git"
fi

if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    die "fatal: not a git repository"
fi

sync_branch () {
    echo "switching to branch '$1'"
    git checkout --quiet "$1"
    echo "rebasing '$1'"
    git pull --rebase --stat
}

current_branch=$(git branch --show-current)
default_branch=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's/.*\///')
branches=($(git branch --format="%(refname:short)"))
branches_without_default=(${branches[@]/${default_branch}})

echo
echo "fetching refs ..."
echo
git fetch --all --prune --verbose
echo
git stash --quiet
sync_branch "${default_branch}"
echo
for branch in "${branches_without_default[@]}"; do
    sync_branch "${branch}"
    echo
done
git checkout --quiet "${current_branch}"
git stash pop --quiet 2>/dev/null || true
