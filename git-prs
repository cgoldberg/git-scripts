#!/usr/bin/env bash
#
# Copyright (c) 2025 Corey Goldberg (https://github.com/cgoldberg)
#
# git-prs - open GitHub Pull Request URLs in a web browser
#
# Requires:
#  - Git
#  - GitHub CLI
#  - Python
#  - jq
#
# - only works if inside a local git repo that was cloned from GitHub
# - if the repo is a fork and the default remote is the parent repo,
#   it looks for PRs in parent repo
#
# Instructions:
#  - set an environment variable named 'GITHUB_USERNAME' with your GitHub
#    account name (i.e.: 'export GITHUB_USERNAME=cgoldberg')
#  - run 'gh repo set-default' and set parent repo as default remote if
#    in a forked repo and want to search PRs in parent repo.
#  - add this script to a directory on your PATH
#  - make this script executable (chmod +x git-prs)
#  - run 'git prs' from any directory in a local git repo
#
# Usage/Example:
#   Show a menu of all Pull Requests with status "open" in current (or parent) repo.
#   When a PR is selected, open its URL in default web browser:
#     - $ git prs
#   Open URLs of all Pull Requests with status "open" in current (or parent) repo
#   in default web browser:
#     - $ git prs -a

set -e

die () {
    tput bold; tput setaf 1; echo -en "\u2717 " 1>&2; tput sgr0
    tput bold; echo "$*" 1>&2; tput sgr0
    exit 1
}

while getopts ":ah" opt; do
    case "${opt}" in
        a )
            OPT_ALL_PRS="true"
            ;;
        h )
            echo -e "open GitHub Pull Request URLs in a web browser\n\n"\
            "options:\n"\
                " -a : open all Pull Request URLs\n"\
                " -h : show this help message"
            exit
            ;;
        \? )
            die "invalid option"
            ;;

    esac
done

if [ -z "${GITHUB_USERNAME}" ]; then
    die "fatal: 'GITHUB_USERNAME' environment variable not set"
fi

if [ ! -x "$(type -pP git)" ]; then
    die "fatal: can't find git"
fi

if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    die "fatal: not a git repository"
fi

if ! git remote --verbose | grep -q "github\.com"; then
    die "fatal: must have an origin on github.com"
fi

if [ ! -x "$(type -pP jq)" ]; then
    die "fatal: can't find jq"
fi

if [ ! -x "$(type -pP python)" ]; then
    die "fatal: can't find python"
fi

if [ ! -x "$(type -pP gh)" ]; then
    die "fatal: can't find GitHub CLI (follow installation instructions at: https://github.com/cli/cli)"
fi

repo="${GITHUB_USERNAME}/$(basename $(basename $(git remote get-url origin)) '.git')"

parent_repo=$(gh repo set-default --view 2>/dev/null)

# if this is a fork, use the parent repo
if [ "${repo}" != "${parent_repo}" ]; then
    repo="${parent_repo}"
fi

pr_url="https://api.github.com/repos/${repo}/pulls"
params="state=open&sort=updated&direction=asc&per_page=100000"

mapfile -t results < <(
    curl -sSL \
    -H "X-GitHub-Api-Version: 2022-11-28" \
    "${pr_url}?${params}" \
    | jq -r --arg GITHUB_USERNAME "${GITHUB_USERNAME}" \
    '.[] | {username: .user.login, title: .title, url: .html_url}
    | select(.username == $GITHUB_USERNAME).title,
    select(.username == $GITHUB_USERNAME).url' 2> /dev/null
 )

if [ ${#results[@]} -eq 0 ]; then
    die "no PRs found"
fi

i=0
for i in "${!results[@]}"; do
    if (( $(($i % 2 )) == 0 )); then
        titles+=("${results[i]}")
    else
        urls+=("${results[i]}")
    fi
done
echo
if [ -n "${OPT_ALL_PRS}" ]; then
    for url in "${urls[@]}"; do
        echo "opening PR URL in web browser ..."
        echo "${url}"
        python -m webbrowser -t "${url}"
    done
else
    for i in "${!titles[@]}"; do
        echo "$((i + 1))) ${titles[i]}"
    done
    echo
    read -p "select a PR: " num
    url="${urls[(($num - 1))]}"
    echo
    echo "opening PR URL in web browser ..."
    echo "${url}"
    python -m webbrowser -t "${url}"
fi
