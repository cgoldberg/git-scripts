#!/usr/bin/env bash
#
# Corey Goldberg (https://github.com/cgoldberg)
#
# git-info - show info about local repository
#
# instructions:
#  - add this script to a directory on your PATH
#  - make this script executable (chmod +x git-info)
#  - run 'git info' from any directory in a local git repo

set -e

die () {
    tput setaf 1; echo -en "\u2717 "; tput sgr0
    tput bold; echo "$*" 1>&2; tput sgr0
    exit 1
}

if [ ! -x "$(command -v git)" ]; then
    die "fatal: can't find git"
fi

if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    die "fatal: not a git repository"
fi

indent () {
    cat - | sed -e 's/^[[:space:]]*/   /g'
}

# traverse up to root of repo
while [[ ! -d .git ]] && [[ ! $(pwd) = "/" ]]; do
    cd ..
done

current_branch="$(git branch --show-current)"
num_commits="$(git rev-list --count "${current_branch}" | LC_NUMERIC="en_US.UTF-8" numfmt --grouping)"
size_disk="$(du -hs | awk '{print $1}')"
size_tracked="$(git ls-files -z | xargs -0 stat -c %s | \
    awk '{total+=$1} END {printf("%.0f\n",total)}' | numfmt --to=iec)"
num_files="$(find . -type f ! -path './.git/*' | wc -l)"
num_tracked_files="$(git ls-files | wc -l)"
lines_tracked_files="$(git ls-files | xargs cat | grep -c ^ | numfmt --grouping)"
files_counts_by_extension="$(find . -type f ! -path './.git/*' -name '*.*' -print0 \
    | xargs -0 -n 1 basename | grep -v '^[\.]' | sed 's/.*\.//' | sort | uniq -c | sort -nr)"

echo
echo -e "\033[1;36m== Stats (branch: ${current_branch}) ==\033[0m"
echo "commits: ${num_commits}" | indent
echo "size on disk: ${size_disk}" | indent
echo "size of tracked files: ${size_tracked}" | indent
echo "files: ${num_files} (excluding .git directory)" | indent
echo "tracked files: ${num_tracked_files}" | indent
echo "lines in tracked files: ${lines_tracked_files}" | indent
echo "files with extensions:" | indent
echo "${files_counts_by_extension}"
echo

echo -e "\033[1;36m== Most Recent Commit (branch: ${current_branch}) ==\033[0m"
git log --max-count=1 --color=never | head -n 5 | indent
echo

echo -e "\033[1;36m== Remote URLs ==\033[0m"
git remote -v | indent
echo

echo -e "\033[1;36m== Remote Branches ==\033[0m"
git branch -r --color=never | indent
echo

echo -e "\033[1;36m== Local Branches ==\033[0m"
git branch --color=never | indent
echo
