#!/usr/bin/env bash
#
# Corey Goldberg (https://github.com/cgoldberg)
#
# git-syncrepo - sync branches on remote fork with parent repo (GitHub)
#
# - fetch from remote and prune stale refs
# - create a local tracking branch for every remote branch
# - only works if inside a local git repo that was cloned from a fork
# - requires GitHub CLI (https://github.com/cli/cli/blob/trunk/docs/install_linux.md)
# - must have parent repo set as default remote (run 'gh repo set-default')
#
# instructions:
#  - set an environment variable named 'GITHUB_USERNAME' with your GitHub
#    account name (i.e.: 'export GITHUB_USERNAME=cgoldberg')
#  - run 'gh repo set-default' and set parent repo as default remote
#  - add this script to a directory on your PATH
#  - make this script executable (chmod +x git-syncrepo)
#  - run 'git syncrepo' from any directory in a local git repo

die () {
    tput setaf 1; echo -en "\u2717 "; tput sgr0
    tput bold; echo "$*" 1>&2; tput sgr0
    exit 1
}

if [ -z "${GITHUB_USERNAME}" ]; then
    die "fatal: 'GITHUB_USERNAME' environment variable not set"
fi

if [ ! -x "$(command -v git)" ]; then
    die "fatal: can't find git"
fi

if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    die "fatal: not a git repository"
fi

if ! git remote --verbose | grep -q "github\.com"; then
    die "fatal: must have an origin on github.com"
fi

if [ ! -x "$(command -v gh)" ]; then
    die "fatal: can't find GitHub CLI (follow installation instructions at: https://github.com/cli/cli)"
fi

repo="${GITHUB_USERNAME}/$(basename $(basename $(git remote get-url origin)) '.git')"

if [[ $(gh repo view "${repo}" --json isFork) == *"false"* ]]; then
    die "fatal: '${repo}' is not a fork"
fi

parent_repo=$(gh repo set-default --view 2>/dev/null)

if [ -z "${parent_repo}" ]; then
    die "fatal: remote repo is not set (run 'gh repo set-default' and set the parent as default remote)"
fi

if [ "${repo}" == "${parent_repo}" ]; then
    die "fatal: remote repo is not the parent (run 'gh repo set-default' and set the parent as default remote)"
fi

sync_parent_branch () {
    echo "syncing '$1' branch on remote fork from its parent ..."
    if gh repo sync "${repo}" --branch "$1" >/dev/null; then
        tput setaf 10; echo -en "\u2714  "; tput sgr0
        echo "synced '${GITHUB_USERNAME}:$1' branch from '${parent_repo%%/*}:${default_branch}'"
    fi
}

echo
echo "fetching refs ..."
echo
git fetch --all --prune --verbose
echo

default_branch=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's/.*\///')

for remote_branch in $(git branch --all --no-color | grep remotes | grep -v "${default_branch}"); do
    branch="${remote_branch#remotes/origin/}"
    git branch --track "${branch}" "${remote_branch}" 2>&1 | grep -v "already exists"
done
echo

branches=( $(git branch --format='%(upstream:short)' | grep origin | awk -F '/' '{print $NF}') )
branches_without_default=( ${branches[@]/${default_branch}} )

sync_parent_branch "${default_branch}"
echo
for branch in "${branches_without_default[@]}"; do
    sync_parent_branch "${branch}"
    echo
done
