#!/usr/bin/env bash
#
# Corey Goldberg (https://github.com/cgoldberg)
#
# git-syncrepo - GitHub remote repo sync
#
# - syncs git branches on a remote fork from their parent repo
# - creates a local tracking branch for every remote branch
# - only works if inside a local git repo that was cloned from a fork
# - requires GitHub CLI (https://github.com/cli/cli/blob/trunk/docs/install_linux.md)
#
# usage:
#  - set an environment variable named `GITHUB_USERNAME` with your GitHub account name:
#    - i.e.: `export GITHUB_USERNAME=cgoldberg`
#  - add this script to a directory on your PATH
#  - make this script executable (chmod +x git-syncrepo)
#  - run `git syncrepo` from any directory in a local git repo

set -e

die() { echo "$*" 1>&2 ; exit 1; }

if [ ! -n "${GITHUB_USERNAME}" ]; then
    die "fatal: GITHUB_USERNAME environment variable not set"
fi

if [ ! -x "$(command -v git)" ]; then
    die "fatal: can't find git"
fi

if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    die "fatal: not a git repository"
fi

if [ ! -x "$(command -v gh)" ]; then
    die "fatal: can't find GitHub CLI. follow installation instructions at: https://github.com/cli/cli"
fi

repo=$(basename $(basename $(git remote get-url origin)) ".git")
username_repo="${GITHUB_USERNAME}/${repo}"

if [[ $(gh repo view "${GITHUB_USERNAME}/${repo}" --json isFork) == *"false"* ]]; then
    die "fatal: ${username_repo} is not a fork"
fi

default_branch=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')

echo
echo "creating local tracking branches if needed"
for remote_branch in $(git branch --all --no-color | grep remotes | grep -v "${default_branch}"); do
    branch="${remote_branch#remotes/origin/}"
    git branch --track "${branch}" "${remote_branch}" 2>&1 | grep -v "already exists"
done
echo
echo "syncing '${default_branch}' branch on remote fork from its parent"
gh repo sync "${username_repo}" --branch "${default_branch}" || die
echo
branches=($(git branch --format='%(upstream:short)' | grep origin | awk -F '/' '{print $NF}'))
branches_without_default=(${branches[@]/${default_branch}})
for branch in "${branches_without_default[@]}"; do
    echo "syncing '${branch}' branch on remote fork from its parent"
    gh repo sync "${username_repo}" --branch "${branch}"
    echo
done
